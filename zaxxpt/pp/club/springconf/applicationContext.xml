<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
	<!-- 读取配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:sysProps.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="100"/>   
    	<property name="maxActive" value="1000"/>   
    	<property name="maxWait" value="60000"/> <!-- 单位ms --> 

	</bean>
	
	<bean id="myDataSource" class="com.hnatourism.framework.core.daosupport.jdbc.connection.myDataSource" >
		<property name="dataSource" ref="dataSource" />
	</bean>
	  
	<!-- 指定映射文件  -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:ibatis_sqlmap_cfg.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="useTransactionAwareDataSource" value="true"></property>
	</bean>
	<!-- 创建持久成管理器 -->
	<bean id="ibatisPersistenceManager"
		class="com.hnatourism.framework.core.daosupport.IBatisPersistenceManagerImpl">
		<property name="sqlMapClient">
			<ref local="sqlMapClient" />
		</property>
	</bean>
	<!-- 创建DAO基类 -->
	<bean id="baseIBatisDaoSupport" abstract="true"
		class="com.hnatourism.framework.core.daosupport.AbstractIBatisDaoSupport">
		<property name="persistanceManager">
			<ref local="ibatisPersistenceManager" />
		</property>
	</bean>
	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" >
    	<property name="targetDataSource" ref="dataSource" />
    </bean>
	<!--创建事务管理平台-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceProxy" />
	</bean>
	
	<!-- 事务通知 (transaction-manager = "transactionManager" 可略)-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" rollback-for="Exception" />
			<tx:method name="view*" read-only="true" rollback-for="Exception" />
			<tx:method name="query*" read-only="true" rollback-for="Exception" />
			<tx:method name="*" read-only="false" timeout="60" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 创建切入点指定事务通知 -->
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.b2c.*.service.I*Service.*(..))" />
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.b2c.*.*.service.I*Service.*(..))" />
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.b2c.*.*.*.service.I*Service.*(..))" />
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.b2c.*.*.*.*.service.I*Service.*(..))" />
			<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.club.loungeserver.I*Service.execute(..))" />
			
			<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(public * com.hnatourism.club.golf.api.I*Dao.handler(..))" />
	</aop:config>
    <!-- JDBC支持 -->
	<bean id="jdbcDaoSupport" class="com.hnatourism.framework.core.daosupport.JdbcDaoSupport">
		<property name="dataSource" ref="dataSourceProxy"/>
		<property name="lobHandler" ref="lobHandler"/>
	</bean>
	
	<!-- JDBC支持 -->
	<bean id="jdbcDAOSupport" class="com.hnatourism.framework.core.daosupport.jdbc.support.JdbcDAOSupport">
	    <property name="dataSource" ref="myDataSource" />
	    <property name="lobHandler" ref="lobHandler"/>
	</bean>
	<!--采用AOP管理JDBC事务 -->
    <bean id="jdbcTransactionManager" class="com.hnatourism.framework.core.daosupport.jdbc.transaction.TransactionManager">
        <property name="dataSource" ref="myDataSource" />
    </bean>
    <!-- 采用aop:around管理jdbc事务 -->
    <aop:config>
        <aop:aspect id="transactionAspect" ref="jdbcTransactionManager">
            <aop:pointcut id="jdbcTransaction" expression="execution(public * com.hnatourism.b2c.*.*.*.service.J*Service.*(..))" />
            <aop:around method="invoke" pointcut-ref="jdbcTransaction" />
        </aop:aspect>
    </aop:config>
    
	<!-- JDBC Oracle大字段支持支持 -->
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">  
        <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>  
    </bean>  
    <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor" lazy-init="true"/>  
    <!-- oracle序列管理，用来获取序列 -->
    <bean id="incre" class="org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer">
		<property name="incrementerName" value="seq"/><!-- ①指定序列名 --> 
		<property name="dataSource" ref="dataSourceProxy"/> <!-- ②设置数据源 --> 
	</bean>
	<!-- 加载bean管理 -->
	<bean class="com.hnatourism.framework.utils.BeanUtils"
		lazy-init="false">
	</bean>
	
	
	<!-- api接口实现 -->
	<bean id="apiDao" class="com.hnatourism.club.golf.api.ApiDaoImp" parent="baseIBatisDaoSupport"/>
	<bean id="apiService" class="com.hnatourism.club.golf.api.ApiService">
		<property name="apiDao" ref="apiDao"/>
	</bean>
	<bean id="apiServerAction" class="com.hnatourism.club.golf.api.ApiServerAction" scope="prototype">
		<property name="apiService" ref="apiService"/>
		<property name="loungeRegistrationCenter" ref="LoungeRegistrationCenter"/>
		<property name="priceValidatorService" ref="priceValidatorServiceImpl"/>
	</bean>
</beans>